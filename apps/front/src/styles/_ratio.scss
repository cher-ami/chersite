@use "./_viewport" as viewport;
@use "./_breakpoints" as breakpoints;
@use "./_functions" as fn;

/// Set property calculated with VH & VW ratio
/// @param {css property} $property
/// @param {Number} $n1
/// @param {Number} $ratioVH [850]
/// @param {Number} $ratioVW [1440]
/// @output
@mixin propertyVH(
  $property,
  $n1,
  $ratioVH: viewport.$viewport-reference-desktop-height,
  $ratioVW: viewport.$viewport-reference-desktop-width
) {
  #{$property}: #{fn.ratioVH($n1, $ratioVH)};
  @if $ratioVW > 0 {
    @media (max-aspect-ratio: #{ #{$ratioVW} / #{$ratioVH+1} }) {
      #{$property}: #{fn.ratioVW($n1, $ratioVW)};
    }
  }
}

/// Set property calculated with VW ratio
/// @param {css property} $property
/// @param {Number} $n1
/// @param {Number} $ratioVW []
/// @output
@mixin propertyVW($property, $n1, $ratioVW: viewport.$viewport-reference-width) {
  #{$property}: #{fn.ratioVW($n1, $ratioVW)};
}

/// Set property rem
/// @param {css property} $property
/// @param {Number | Number[]} $value1 - mobile value
/// @param {Number | Number[]} $value2 - desktop value
/// @output
@mixin rem($property, $value1, $value2: $value1) {
  @if length($value1) == 1 {
    #{$property}: fn.toRem($value1);
  } @else if length($value1) == 2 {
    #{$property}: fn.toRem(nth($value1, 1)) fn.toRem(nth($value1, 2));
  } @else if length($value1) == 3 {
    #{$property}: fn.toRem(nth($value1, 1))
      fn.toRem(nth($value1, 2))
      fn.toRem(nth($value1, 3));
  } @else if length($value1) == 4 {
    #{$property}: fn.toRem(nth($value1, 1))
      fn.toRem(nth($value1, 2))
      fn.toRem(nth($value1, 3))
      fn.toRem(nth($value1, 4));
  }
  @if $value2 != $value1 {
    @media (min-width: breakpoints.$breakpoint-tablet) {
      @if length($value2) == 1 {
        #{$property}: fn.toRem($value2);
      } @else if length($value2) == 2 {
        #{$property}: fn.toRem(nth($value2, 1)) fn.toRem(nth($value2, 2));
      } @else if length($value2) == 3 {
        #{$property}: fn.toRem(nth($value2, 1))
          fn.toRem(nth($value2, 2))
          fn.toRem(nth($value2, 3));
      } @else if length($value2) == 4 {
        #{$property}: fn.toRem(nth($value2, 1))
          fn.toRem(nth($value2, 2))
          fn.toRem(nth($value2, 3))
          fn.toRem(nth($value2, 4));
      }
    }
  }
}

/// Mixin pour manipuler les propriétés des vues en fonction des breakpoints.
/// @param {string} $property - La propriété CSS à manipuler.
/// @param {any} $value1 - La première valeur pour cette propriété.
/// @param {any} [$value2=$value1] - La deuxième valeur pour cette propriété (par défaut égale à $value1).
/// @param {string} [$breakpoint=breakpoints.$breakpoint-tablet] - Le point de rupture (breakpoint) pour les médias queries (par défaut égal à breakpoints.$breakpoint-tablet).
/// @param {boolean} [$cap=false] - Indique si les valeurs doivent être plafonnées (par défaut false).
@mixin propertyViewport(
  $property,
  $value1,
  $value2: $value1,
  $breakpoint: breakpoints.$breakpoint-tablet,
  $cap: false
) {
  //Mobile
  @include propertyVW($property, $value1);

  //Horizontal Desktop & Tablet
  @include desktop($breakpoint) {
    @include propertyVH($property, $value2, $ratioVW: 0);
  }

  //Portrait Desktop & Tablet
  @include desktop-portrait {
    @include propertyVW($property, $value2, viewport.$viewport-reference-tablet-width);
  }

  //Horizontal mobile
  @include mobile-landscape {
    @include propertyVH($property, $value2, viewport.$viewport-reference-width, 0);
  }

  @if $cap {
    @media (min-width: breakpoints.$breakpoint-bigLaptop) {
      @if length($value1) == 1 {
        #{$property}: fn.toPx($value1);
      } @else if length($value1) == 2 {
        #{$property}: fn.toPx(nth($value1, 1)) fn.toPx(nth($value1, 2));
      } @else if length($value1) == 3 {
        #{$property}: fn.toPx(nth($value1, 1))
          fn.toPx(nth($value1, 2))
          fn.toPx(nth($value1, 3));
      } @else if length($value1) == 4 {
        #{$property}: fn.toPx(nth($value1, 1))
          fn.toPx(nth($value1, 2))
          fn.toPx(nth($value1, 3))
          fn.toPx(nth($value1, 4));
      }
    }
  }
}

/// Desktop media query.
/// @param {string} [$breakpoint=breakpoints.$breakpoint-tablet] - Le point de rupture pour les médias queries (par défaut égal à breakpoints.$breakpoint-tablet).
@mixin desktop(
  $horizontalBreakpoint: breakpoints.$breakpoint-tablet,
  $verticalBreakpoint: breakpoints.$breakpoint-mobile-horizontal
) {
  @media (min-width: $horizontalBreakpoint) and (min-height: $verticalBreakpoint) and (orientation: landscape) {
    @content;
  }
}

/// Desktop & Tablet portrait media query
/// @param {string} [$breakpoint=breakpoints.$breakpoint-tablet] - Le point de rupture pour les médias queries (par défaut égal à breakpoints.$breakpoint-tablet).
@mixin desktop-portrait($breakpoint: breakpoints.$breakpoint-tablet) {
  @media (min-width: $breakpoint) and (orientation: portrait) {
    @content;
  }
}

/// Mobile landscape media query.
/// @param {string} [$breakpoint=breakpoints.$breakpoint-laptop] - Le point de rupture pour les médias queries (par défaut égal à breakpoints.$breakpoint-laptop).
@mixin mobile-landscape($breakpoint: breakpoints.$breakpoint-laptop) {
  @media (max-width: #{$breakpoint - 1}) and (orientation: landscape) {
    @content;
  }
}
