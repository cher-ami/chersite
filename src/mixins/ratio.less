@import (reference) "../references.less";

/**
Get VH value from ratio
 */
.ratioVW(@n1, @n2 : @viewport-reference-width) {
  @returns: (@n1 / @n2) * 100vw;
}

/**
Get VH value from ratio
 */
.ratioVH(@n1, @n2 : @viewport-reference-height) {
  // fallback for old browser who don't support css --var
  @returns: (@n1 / @n2) * 100vh;
  // vh value relative to css --vh variable
  @var: var(--vh, 1vh);
  @returns: ~"calc( (@{n1} / @{n2}) * (@{var} * 100) )";
}

/**
Get VW value for property according to value in pixels
 */
 .propertyVW(@property, @n1, @n2 : @viewport-reference-width) {
  @{property}: .ratioVW(@n1, @n2) [ @returns];
}

/**
Get VH value for property according to value in pixels
 */
.propertyVH(@property, @n1, @n2 : @viewport-reference-height, @aspect-ratio: true) {
  @{property}: .ratioVH(@n1, @n2) [ @returns];

  & when (@aspect-ratio = true) {
    // calc viewport height
    @local-viewport-height: @viewport-reference-desktop-height + 1;

    @media (max-aspect-ratio: ~"calc(@{viewport-reference-desktop-width} / @{local-viewport-height})") {
      .propertyVW(@property, @n1, @n2 : @viewport-reference-height);
    }
  }
}

/**
Responsive Property
*/
.R(
  @property,
  @value1,
  @value2: @value1,
  @breakpoint: @breakpoint-tablet,
  @aspect-ratio: true
) {
  .propertyVW(@property, @value1, @n2 : @viewport-reference-width);
  @media (min-width: @breakpoint) {
    .propertyVH(@property, @value2, @n2 : @viewport-reference-desktop-height, @aspect-ratio);
  }
  @media (min-width: @breakpoint-desktop) {
    @returns: (@value2);
    @{property}: unit(@returns, px);
  }
}
